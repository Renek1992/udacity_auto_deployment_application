version: 2.1

orbs:
  slack: circleci/slack@4.4.2

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            exit 1

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm i
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - slack/notify:
          channel: ${SLACK_DEFAULT_CHANNEL}
          event: fail
          template: basic_fail_1

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm i
            npm run build     
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - slack/notify:
          channel: ${SLACK_DEFAULT_CHANNEL}
          event: fail
          template: basic_fail_1

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Test front-end
          command: |
            cd frontend
            npm audit fix
            npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - slack/notify:
          channel: ${SLACK_DEFAULT_CHANNEL}
          event: fail
          template: basic_fail_1

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Test back-end
          command: |
            cd backend
            npm audit fix
            npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - slack/notify:
          channel: ${SLACK_DEFAULT_CHANNEL}
          event: fail
          template: basic_fail_1

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan front-end
          command: |
            cd frontend
            npm audit fix --audit-level=critical --force
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - slack/notify:
          channel: ${SLACK_DEFAULT_CHANNEL}
          event: fail
          template: basic_fail_1

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan back-end
          command: |
            cd backend
            npm audit fix --audit-level=critical --force
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - slack/notify:
          channel: ${SLACK_DEFAULT_CHANNEL}
          event: fail
          template: basic_fail_1

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople-${CIRCLE_WORKFLOW_ID:0:7} \
              --stack-name backend-${CIRCLE_WORKFLOW_ID:0:7}  \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople-${CIRCLE_WORKFLOW_ID:0:7} \
              --stack-name frontend-${CIRCLE_WORKFLOW_ID:0:7}  \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} 
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo "[web]" > .circleci/ansible/inventory.txt
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters Name=tag:project,Values=udapeople-${CIRCLE_WORKFLOW_ID:0:7} \
              --output text >> .circleci/ansible/inventory.txt
            curl -H "Content-Type: text/plain" -H "token: 0be42881-6cc0-492b-991f-6a00ea463187" \
              --request PUT \
              --data `aws ec2 describe-instances \
                --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --filters Name=tag:project,Values=udapeople-${CIRCLE_WORKFLOW_ID:0:7} \
                --output text` \
              https://api.memstash.io/values/hosts-deployed-${CIRCLE_WORKFLOW_ID:0:7}
              echo URL: https://api.memstash.io/values/hosts-deployed-${CIRCLE_WORKFLOW_ID:0:7}
              echo Token: 0be42881-6cc0-492b-991f-6a00ea463187
              cat .circleci/ansible/inventory.txt
      - restore_cache:
          keys: [backend-build]
      - persist_to_workspace:
          root: ~/project
          paths:
            - .circleci/ansible/inventory.txt
            - .circleci/outputs/backend_url.txt
            - backend/
      # Here's where you will add some code to rollback on failure      

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: [3e:fd:98:8c:f1:93:18:34:2f:ce:ce:c4:2e:35:7b:74]
      - attach_workspace:
          at: ~/project
      - run:
          name: Install ansible.
          command: |
            apk add --update ansible
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible nodejs npm curl 
            pip install awscli
            npm install pm2 -g
      - run:
          name: Configure server
          command: |
            echo ENVIRONMENT=production > "backend/.env"
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
            echo NODE_ENV=production >> "backend/.env"
      - run:
          name: Configure server with ansible
          no_output_timeout: 30m
          command: |
            cd .circleci/ansible
            echo "Inventory content"
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      - persist_to_workspace:
          root: ~/project
          paths:
            - .circleci/ansible/inventory.txt
            - backend/
      # Here's where you will add some code to rollback on failure      

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            cd backend
            cat .env
            npm run migrations | tee migrations-${CIRCLE_WORKFLOW_ID}.txt
            cat migrations-${CIRCLE_WORKFLOW_ID}.txt
      - run:
          name: Send migration results to memstash
          command: |
            cd backend
            if grep -q "success" migrations-${CIRCLE_WORKFLOW_ID}.txt
            then
              curl -H "Content-Type: text/plain" -H "token: 0be42881-6cc0-492b-991f-6a00ea463187" \
              --request PUT \
              --data '1' \
              https://api.memstash.io/values/migrations-${CIRCLE_WORKFLOW_ID:0:7}
            else
              curl -H "Content-Type: text/plain" -H "token: 0be42881-6cc0-492b-991f-6a00ea463187" \
              --request PUT \
              --data '0' \
              https://api.memstash.io/values/migrations-${CIRCLE_WORKFLOW_ID:0:7}
            fi
            echo Key: migrations-${CIRCLE_WORKFLOW_ID:0:7}
     # Here's where you will add some code to rollback on failure      

  deploy-frontend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible nodejs npm curl
            pip install awscli
      - run:
          name: Get backend url
          command: |
            BACKEND_IP=$(curl -H "token: 0be42881-6cc0-492b-991f-6a00ea463187" \
              --request GET https://api.memstash.io/values/hosts-deployed-${CIRCLE_WORKFLOW_ID:0:7})
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm audit fix
            BACKEND_IP=$(curl -H "token: 0be42881-6cc0-492b-991f-6a00ea463187" \
              --request GET https://api.memstash.io/values/hosts-deployed-${CIRCLE_WORKFLOW_ID:0:7})
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL=${API_URL}"
            echo API_URL=$API_URL > .env
            echo ENVIRONMENT=production >> .env
            cat ".env"
            npm run build
            cd dist
            aws s3 sync . s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --delete
      # Here's where you will add some code to rollback on failure      
                    
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      - add_ssh_keys:
          fingerprints: [3e:fd:98:8c:f1:93:18:34:2f:ce:ce:c4:2e:35:7b:74]
      - attach_workspace:
          at: ~/project
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible nodejs npm curl openssh-client
            pip install awscli
      - run:
          name: Deploy backend
          no_output_timeout: 30m
          command: |
            pwd
            ANSIBLE_HOST_KEY_CHECKING=False            
            tar -C backend -czvf backend_artifact.tar.gz .
            cd .circleci/ansible
            ansible-playbook -i inventory.txt deploy-backend.yml
      # Here's where you will add some code to rollback on failure  

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache \
              curl \
              python3 \
              py3-pip \
              && pip3 install --upgrade pip \
              && pip3 install \
              awscli \
              && rm -rf /var/cache/apk/*
      - run:
          name: Get backend url
          command: |
            BACKEND_IP=$(curl -H "token: 0be42881-6cc0-492b-991f-6a00ea463187" \
              --request GET https://api.memstash.io/values/hosts-deployed-${CIRCLE_WORKFLOW_ID:0:7})
            export API_URL="http://${BACKEND_IP}:3030/api/status"
      - run:
          name: Backend smoke test.
          command: |
            BACKEND_IP=$(curl -H "token: 0be42881-6cc0-492b-991f-6a00ea463187" \
              --request GET https://api.memstash.io/values/hosts-deployed-${CIRCLE_WORKFLOW_ID:0:7})
            export API_URL="http://${BACKEND_IP}:3030/api/status"
            echo "${CIRCLE_WORKFLOW_ID:0:7}"
            echo "${API_URL}"
            curl ${API_URL}
      - run:
          name: Frontend smoke test.
          command: |
            if curl -s  "http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com" | grep "Welcome"
            then
              return 1
            else
              return 1
            fi
      # Here's where you will add some code to rollback on failure  

#   cloudfront-update:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [main]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]